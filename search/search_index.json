{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Hestia ERP Backend","text":"<p>This is the backend for the Hestia ERP system. It is a gRPC API that is used to manage the data for the Hestia ERP system.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>First you'll need to get you environment setup. Follow the instructions in the Setup Guide to get started.</p>"},{"location":"idm/","title":"Identity Management Service","text":"<p>ref: methods/IdentityManagement.go, utils/idm/idm.go</p> <p>The Identity Management Service (IDM) is a service that provides a way to manage user identities and their access to various resources. It is a key component of the platform, and is used to manage user accounts, roles, and permissions.</p>"},{"location":"idm/#features","title":"Features","text":""},{"location":"idm/#user-management","title":"User Management","text":"<p>TBD</p>"},{"location":"idm/#password-management","title":"Password Management","text":"<p>TBD</p>"},{"location":"idm/#password-encryption","title":"Password Encryption","text":"<p>A password is encrypted using the SHA-256 algorithm, then SHA-512 algorithm and again SHA-256 algorithm. This is done to ensure that the password is secure and cannot be easily decrypted. A random salt is also generated and stored with the password to ensure that the same password will not have the same hash.</p>"},{"location":"idm/#avoiding-mitm-attacks","title":"Avoiding MITM Attacks","text":"<p>To avoid MITM attacks, the password is hashed using SHA-256 on the client side before being sent to the server. This ensures that the password is not sent in plain text over the network.</p>"},{"location":"setup/","title":"Setup your dev environment","text":"<p>This guide will walk you through setting up your development environment for the Hestia ERP Backend.</p>"},{"location":"setup/#tools","title":"Tools","text":""},{"location":"setup/#coding-tools","title":"Coding Tools","text":"<ul> <li>Visual Studio Code<ul> <li>This is the recommended IDE for this project, however you can use any IDE you like.</li> <li>Go Extension</li> <li>gRPC Tools</li> </ul> </li> <li>Golang<ul> <li>This is the language the backend is written in.</li> <li>Install the latest version of Go.</li> </ul> </li> <li>Protocol Buffers<ul> <li>Download and install the latest version of Protoc.</li> <li>Add the Protoc to your PATH.</li> </ul> </li> <li>Docker<ul> <li>This is used to run the database and other services locally.</li> <li>Install the latest version of Docker.</li> </ul> </li> </ul>"},{"location":"setup/#setup-protoc-for-golang","title":"Setup Protoc for Golang","text":"<ol> <li>Install the Protoc plugin for Golang.</li> </ol> <pre><code>go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n</code></pre>"},{"location":"setup/#database-tools","title":"Database Tools","text":"<p>We use PostgreSQL for the database. You will need to install the following tools to work with the database. </p> <ul> <li>pgModeler<ul> <li>This is used to design and see the database schema.</li> <li>You will need to compile PGModeler or request a copy.</li> </ul> </li> <li>pgAmin<ul> <li>This is used to manage the database.</li> <li>You will use this to test queries.</li> <li>Install the latest version of PGAdmin.</li> </ul> </li> </ul>"},{"location":"setup/#setup-database","title":"Setup database","text":""},{"location":"setup/#using-docker","title":"Using Docker","text":"<p>We recommend using Docker to run the database locally. You can use the following command to start a PostgreSQL 16.1 instance.</p> <pre><code>docker run --name hestia-erp-db -e POSTGRES_PASSWORD=YOUR_PASSWORD_HERE -p 5432:5432 -d postgres:16.1-bullseye\n</code></pre> <p>You will need to replace <code>YOUR_PASSWORD_HERE</code> with your own password.</p>"},{"location":"setup/#importing-test-data-to-the-local-db","title":"Importing test data to the local DB","text":"<p>Using PGAdmin, connect to the database and run the <code>test_data.sql</code> file to import the test data. This will create the tables and import the test data. It may take a few minutes to run.</p>"},{"location":"setup/#using-the-dev-database","title":"Using the Dev Database","text":"<p>You can request access to the dev database to work with test data.  Not available yet.</p>"},{"location":"setup/#setup-the-env-variables","title":"Setup the ENV variables","text":"<p>You will need to add the following to your environment variables.</p> <pre><code>export PGHOST=localhost\nexport PGUSER=YOUR_USERNAME_HERE\nexport PGPASSWORD=YOUR_PASSWORD_HERE\nexport PGDATABASE=erp\n</code></pre> <p>For Windows you can use the command <code>set</code> instead of <code>export</code>, however we recommend just setting the variables via the settings. Replace <code>YOUR_USERNAME_HERE</code> and <code>YOUR_PASSWORD_HERE</code> with your own username and password. If you are using Docker to run the database, you can use the default <code>postgres</code> user and the password you set when you started the container.</p>"},{"location":"mermaid/","title":"User signup with a Company","text":"<pre><code>sequenceDiagram\nUser-&gt;&gt;Backend: Create new user account\nBackend-&gt;&gt;Backend: Send email verification\nUser-&gt;&gt;Backend: Verify email\nUser-&gt;&gt;Backend: Login\nBackend-&gt;&gt;User: Send Auth Token (\"X-AUTH-TOKEN\")\nUser-&gt;&gt;Backend: Create new company with subscription\nBackend-&gt;&gt;Backend: Associate user with company\nBackend-&gt;&gt;User: Send company details\n</code></pre>"}]}