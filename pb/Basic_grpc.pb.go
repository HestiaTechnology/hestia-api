// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/Basic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HestiaService_GetPerson_FullMethodName  = "/hestia.api.HestiaService/GetPerson"
	HestiaService_GetAddress_FullMethodName = "/hestia.api.HestiaService/GetAddress"
)

// HestiaServiceClient is the client API for HestiaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HestiaServiceClient interface {
	GetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	GetAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
}

type hestiaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHestiaServiceClient(cc grpc.ClientConnInterface) HestiaServiceClient {
	return &hestiaServiceClient{cc}
}

func (c *hestiaServiceClient) GetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, HestiaService_GetPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hestiaServiceClient) GetAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, HestiaService_GetAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HestiaServiceServer is the server API for HestiaService service.
// All implementations must embed UnimplementedHestiaServiceServer
// for forward compatibility
type HestiaServiceServer interface {
	GetPerson(context.Context, *Person) (*Person, error)
	GetAddress(context.Context, *Address) (*Address, error)
	mustEmbedUnimplementedHestiaServiceServer()
}

// UnimplementedHestiaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHestiaServiceServer struct {
}

func (UnimplementedHestiaServiceServer) GetPerson(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedHestiaServiceServer) GetAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedHestiaServiceServer) mustEmbedUnimplementedHestiaServiceServer() {}

// UnsafeHestiaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HestiaServiceServer will
// result in compilation errors.
type UnsafeHestiaServiceServer interface {
	mustEmbedUnimplementedHestiaServiceServer()
}

func RegisterHestiaServiceServer(s grpc.ServiceRegistrar, srv HestiaServiceServer) {
	s.RegisterService(&HestiaService_ServiceDesc, srv)
}

func _HestiaService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HestiaServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HestiaService_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HestiaServiceServer).GetPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _HestiaService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HestiaServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HestiaService_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HestiaServiceServer).GetAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

// HestiaService_ServiceDesc is the grpc.ServiceDesc for HestiaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HestiaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hestia.api.HestiaService",
	HandlerType: (*HestiaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _HestiaService_GetPerson_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _HestiaService_GetAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Basic.proto",
}
