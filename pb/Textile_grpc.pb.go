// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/Textile.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextileService_CreateTechnicalModel_FullMethodName = "/hestia.api.textile.TextileService/CreateTechnicalModel"
)

// TextileServiceClient is the client API for TextileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextileServiceClient interface {
	CreateTechnicalModel(ctx context.Context, in *TechnicalModel, opts ...grpc.CallOption) (*TechnicalModel, error)
}

type textileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextileServiceClient(cc grpc.ClientConnInterface) TextileServiceClient {
	return &textileServiceClient{cc}
}

func (c *textileServiceClient) CreateTechnicalModel(ctx context.Context, in *TechnicalModel, opts ...grpc.CallOption) (*TechnicalModel, error) {
	out := new(TechnicalModel)
	err := c.cc.Invoke(ctx, TextileService_CreateTechnicalModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextileServiceServer is the server API for TextileService service.
// All implementations must embed UnimplementedTextileServiceServer
// for forward compatibility
type TextileServiceServer interface {
	CreateTechnicalModel(context.Context, *TechnicalModel) (*TechnicalModel, error)
	mustEmbedUnimplementedTextileServiceServer()
}

// UnimplementedTextileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextileServiceServer struct {
}

func (UnimplementedTextileServiceServer) CreateTechnicalModel(context.Context, *TechnicalModel) (*TechnicalModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTechnicalModel not implemented")
}
func (UnimplementedTextileServiceServer) mustEmbedUnimplementedTextileServiceServer() {}

// UnsafeTextileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextileServiceServer will
// result in compilation errors.
type UnsafeTextileServiceServer interface {
	mustEmbedUnimplementedTextileServiceServer()
}

func RegisterTextileServiceServer(s grpc.ServiceRegistrar, srv TextileServiceServer) {
	s.RegisterService(&TextileService_ServiceDesc, srv)
}

func _TextileService_CreateTechnicalModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechnicalModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextileServiceServer).CreateTechnicalModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextileService_CreateTechnicalModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextileServiceServer).CreateTechnicalModel(ctx, req.(*TechnicalModel))
	}
	return interceptor(ctx, in, info, handler)
}

// TextileService_ServiceDesc is the grpc.ServiceDesc for TextileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hestia.api.textile.TextileService",
	HandlerType: (*TextileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTechnicalModel",
			Handler:    _TextileService_CreateTechnicalModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Textile.proto",
}
